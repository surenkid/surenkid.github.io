openapi: 3.0.0
info:
  version: 1.7.2
  title: 苏美基础API文档
  description: 基础API（基建）主要用于为Saas提供基础接口
  termsOfService: ''
servers:
  - url: 'https://dev-gapi.sumeils.com/v2'
    description: 开发环境
  - url: 'https://gapi.sumeils.com/v2'
    description: 生产环境
  - url: 'http://gapi.local.sumeils.com/v2'
    description: 本地环境
    variables: {}
paths:
  /user/get:
    get:
      summary: '用户信息'
      description: '通过user_id或mobile换取用户基础信息'
      tags:
        - User
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: 用户id
          allowEmptyValue: false
        - name: mobile
          in: query
          required: false
          schema:
            type: integer
          description: 手机号
        - $ref: '#/components/parameters/paramFollowStatusUserId'
      operationId: ''
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaUserId'
                          - $ref: '#/components/schemas/schemaUser'
                          - $ref: '#/components/schemas/schemaUserOutput'
  /user/add:
    post:
      summary: '新建用户'
      description: '在用户中心新建用户'
      tags:
        - User
      requestBody:
        description: '默认传入参数，mobile和user_id可选其一'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaUserMobile'
                - $ref: '#/components/schemas/schemaUser'
                - $ref: '#/components/schemas/schemaUserThirdId'
      operationId: ''
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaUserId'
                          - $ref: '#/components/schemas/schemaUser'
  /user/update: 
    post:
      summary: '更新用户'
      description: '修改用户基础信息'
      tags:
        - User
      requestBody:
        description: '默认传入参数，mobile和user_id可选其一'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaUserId'
                - $ref: '#/components/schemas/schemaUser'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaUserId'
                          - $ref: '#/components/schemas/schemaUser'

  /user/list: 
    get:
      summary: '用户列表'
      description: '根据筛选条件列出用户列表。注意：followed_user_id和fan_user_id只能选择一个'
      tags:
        - User
      parameters:
        - name: followed_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 所有关注指定用户的人，即：该用户的粉丝列表
          allowEmptyValue: false
        - name: fan_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户所关注的所有人，即：该用户的关注者列表
          allowEmptyValue: false
        - name: custom_user_ids
          in: query
          required: false
          schema:
            type: integer
          description: 指定部分用户，该参数为数组用逗号分隔
        - $ref: '#/components/parameters/paramFollowStatusUserId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                  allOf:
                    - $ref: '#/components/schemas/codeMsg'
                    - properties:
                        data:
                          type: object
                          properties:
                            list:
                              type: array
                              items:
                                allOf:
                                - $ref: '#/components/schemas/schemaUserId'
                                - $ref: '#/components/schemas/schemaUser'
                                - $ref: '#/components/schemas/schemaUserOutput'
                            total:
                              type: integer
                              description: 记录总条目数
                              example: 3
             
                            
  /user/follow: 
    post:
      summary: 添加用户关系
      description: 指定用户与另一用户建立联系；例如关羽关注刘备，建立的是一种网状关系
      tags:
        - User
      requestBody:
        description: 默认传入参数，两者必传
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaUserFollow'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/codeMsg'
  /user/unfollow: 
    post:
      summary: 删除用户关系
      description: 指定用户取消关注另一用户
      tags:
        - User
      requestBody:
        description: 默认传入参数，两者必传
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaUserFollow'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/codeMsg'
  /content/get: 
    get:
      summary: 内容详情
      description: 通过content_id获取内容详情
      tags:
        - Content
      parameters:
        - name: content_id
          in: query
          required: true
          schema:
            type: integer
          description: 内容ID，即文章id
          allowEmptyValue: false
        - $ref: '#/components/parameters/paramLikeStatusUserId'
      operationId: ''
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaContentId'
                          - $ref: '#/components/schemas/schemaContent'
                          - $ref: '#/components/schemas/schemaContentOutput'
                          - $ref: '#/components/schemas/schemaContentOutputGet'
  /content/add: 
    post:
      summary: 添加内容
      description: 发布一篇新内容到内容中心，可以是日志，新闻，或者状态
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaContent'
                - $ref: '#/components/schemas/schemaContentInput'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaContentId'
                          - $ref: '#/components/schemas/schemaContent'
                          - $ref: '#/components/schemas/schemaContentOutput'
                          - $ref: '#/components/schemas/schemaContentOutputGet'
  /content/list: 
    get:
      summary: '文章列表'
      description: '根据筛选条件列出文章列表。'
      tags:
        - Content
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户所有文章，即作者为该用户的文章列表
          allowEmptyValue: false
        - name: tag_id
          in: query
          required: false
          schema:
            type: integer
          description: 打上指定标签的所有文章
          allowEmptyValue: false
        - name: like_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户赞过的所有文章
          allowEmptyValue: false
        - name: follow_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户所关注的所有用户的文章
          allowEmptyValue: false
        - name: only_publish
          in: query
          required: false
          schema:
            type: integer
          description: 是否仅显示发布状态的文章（用于审核后显示），发布状态为给文章打上`tag_id = 2`的标签，移除该标签为取消发布状态
          allowEmptyValue: false
        - $ref: '#/components/parameters/paramLikeStatusUserId'
        - $ref: '#/components/parameters/paramSearchKeyWord'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        type: object
                        properties:
                          list:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/schemaContentId'
                                - $ref: '#/components/schemas/schemaContent'
                                - $ref: '#/components/schemas/schemaContentOutput'
                                - $ref: '#/components/schemas/schemaContentOutputList'
                          total:
                            type: integer
                            description: 记录总条目数
                            example: 387
  /content/update: 
    post:
      summary: 更新内容
      description: 修改一篇内容
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaContentId'
                - $ref: '#/components/schemas/schemaContent'
                - $ref: '#/components/schemas/schemaContentInput'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaContentId'
                          - $ref: '#/components/schemas/schemaContent'
                          - $ref: '#/components/schemas/schemaContentOutput'
                          - $ref: '#/components/schemas/schemaContentOutputGet'
  /content/delete: 
    post:
      summary: 删除内容
      description: 删除一篇内容
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaContentId'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /content/comment/get:
    get:
      summary: 获取评论
      description: 获取一条评论的详情（用于后期删除评论判断作者时使用）
      tags:
        - Content
      parameters:
        - name: comment_id
          in: query
          required: true
          schema:
            type: integer
          description: 评论id
          allowEmptyValue: false
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/schemaCommentId'
                - $ref: '#/components/schemas/schemaCommentCommon'
  /content/comment/add: 
    post:
      summary: 添加评论
      description: 对文章发布一条评论，或者对文章中的某条评论发布一条评论
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaCommentCommon'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaCommentId'
                          - $ref: '#/components/schemas/schemaCommentCommon'
  /content/comment/delete: 
    post:
      summary: 删除评论
      description: 删除一条评论
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaCommentId'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /content/comment/list: 
    get:
      summary: 评论列表
      description: 根据条件显示对应的评论列表。一般分三种，指定文章的评论列表，指定评论的子评论列表，指定人的评论列表
      tags:
        - Content
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户所有评论
          allowEmptyValue: false
        - name: content_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定文章下的所有评论
          allowEmptyValue: false
        - name: target_comment_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定评论下的所有子评论
          allowEmptyValue: false
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        type: object
                        properties:
                          list:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/schemaCommentId'
                                - $ref: '#/components/schemas/schemaCommentCommon'
                                # - properties:
                                #     sub_comment_total:
                                #       type: integer
                                #       description: 该评论下面包含的子评论数
                                #       example: 2
                          total:
                            type: integer
                            description: 记录总条目数
                            example: 387
  /content/like/add: 
    post:
      summary: 添加赞
      description: 对文章点赞，点赞行为等同于加入收藏
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/likeInfo'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /content/like/delete: 
    post:
      summary: 取消赞
      description: 对文章取消赞，等同于删除收藏
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/likeInfo'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /content/like/total: 
    get:
      summary: 获取点赞总数
      description: 根据指定条件，获取点赞总数量
      tags:
        - Content
      parameters:
        - name: post_like_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户点过的所有文章的赞的总数量
          allowEmptyValue: false
        - name: get_like_user_id
          in: query
          required: false
          schema:
            type: integer
          description: 指定用户收到的所有文章的赞的总数量
          allowEmptyValue: false
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: 查询出的赞的总数
                            example: 8
  /content/tag/add: 
    post:
      summary: 添加标签
      description: 指定用户对文章添加指定标签，包含对象：人，标签，文章
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/tagInfo'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /content/tag/delete: 
    post:
      summary: 移除标签
      description: 指定用户对文章删除指定标签
      tags:
        - Content
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/tagInfo'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /media/add:
    post:
      summary: 上传媒体文件
      description: 上传媒体文件并获取media_id和对应的外链URL
      tags:
        - Media
      requestBody:
        description: 默认传入参数
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 需要上传的媒体文件
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        $ref: '#/components/schemas/schemaMedia'
  /media/get: 
    get:
      summary: 获取指定媒体
      description: 列出指定用户所有点赞的文章id数组。这部分直接从redis中读取
      tags:
        - Media
      parameters:
        - name: media_id
          in: query
          required: true
          schema:
            type: integer
          description: 媒体文件id
          allowEmptyValue: false
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        $ref: '#/components/schemas/schemaMedia'
  /tag/get: 
    get:
      summary: 标签详情
      description: 获取单条系统标签的详情，一般用户在编辑页面显示
      tags:
        - Tag
      parameters:
        - name: tag_id
          in: query
          required: true
          schema:
            type: integer
          description: 标签id
          allowEmptyValue: false
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaTagId'
                          - $ref: '#/components/schemas/schemaTag'
  /tag/add: 
    post:
      summary: 新建标签
      description: 在系统中建立标签。注意：标签在这里被建立后，获取到tag_id，才能关联用户与文章。
      tags:
        - Tag
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaTag'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaTagId'
                          - $ref: '#/components/schemas/schemaTag'
  /tag/update: 
    post:
      summary: 更新标签
      description: 在系统中修改指定标签
      tags:
        - Tag
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaTagId'
                - $ref: '#/components/schemas/schemaTag'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaTagId'
                          - $ref: '#/components/schemas/schemaTag'
  /tag/delete: 
    post:
      summary: 删除标签
      description: 在系统中删除指定标签
      tags:
        - Tag
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaTagId'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /tag/list: 
    get:
      summary: 标签列表
      description: 显示系统中所有的标签列表
      tags:
        - Tag
      parameters:
        - name: tag_group_id
          in: query
          required: true
          schema:
            type: integer
          description: 指定标签分组id
          allowEmptyValue: false
        - name: keyword
          in: query
          required: false
          schema:
            type: string
          description: 标签搜索关键词
          allowEmptyValue: false
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        type: object
                        properties:
                          list:
                            type: array
                            items:
                              allOf:
                                - properties:
                                    id:
                                      type: integer
                                      description: 标签id
                                      example: 5
                                - $ref: '#/components/schemas/schemaTag'
                          total:
                            type: integer
                            description: 标签总数
                            example: 2
  /config/get: 
    get:
      deprecated: true
      summary: 获取配置值
      description: 获取指定配置名（键）所对应的配置值，以json格式返回
      tags:
        - Config
      parameters:
        - name: config_id
          in: query
          required: false
          schema:
            type: integer
          description: 配置id
          allowEmptyValue: false
        - name: config_key
          in: query
          required: false
          schema:
            type: integer
          description: 配置名（键）
          allowEmptyValue: false
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaConfigId'
                          - $ref: '#/components/schemas/schemaConfig'
                          - $ref: '#/components/schemas/schemaConfigOutput'
  /config/add: 
    post:
      deprecated: true
      summary: 新增配置
      description: 在系统中新增一条配置
      tags:
        - Config
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaConfig'
                - $ref: '#/components/schemas/schemaConfigKey'
                - $ref: '#/components/schemas/schemaConfigInput'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaConfigId'
                          - $ref: '#/components/schemas/schemaConfig'
                          - $ref: '#/components/schemas/schemaConfigOutput'
  /config/update: 
    post:
      deprecated: true
      summary: 更新配置
      description: 更新系统中已经存在的配置值
      tags:
        - Config
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              allOf:
                - $ref: '#/components/schemas/schemaConfigId'
                - $ref: '#/components/schemas/schemaConfig'
                - $ref: '#/components/schemas/schemaConfigInput'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/schemaConfigId'
                          - $ref: '#/components/schemas/schemaConfig'
                          - $ref: '#/components/schemas/schemaConfigOutput'
  /config/delete: 
    post:
      deprecated: true
      summary: 删除配置
      description: 在系统中删除一条配置
      tags:
        - Config
      requestBody:
        description: 默认传入参数
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/schemaConfigId'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/codeMsg'
  /config/list: 
    get:
      deprecated: true
      summary: 配置列表
      description: 显示系统中所有的配置列表
      tags:
        - Config
      parameters:
        - name: config_group_id
          in: query
          required: true
          schema:
            type: integer
          description: 指定标签分组id
          allowEmptyValue: false
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        default:
          description: 默认返回信息
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/codeMsg'
                  - properties:
                      data:
                        type: object
                        properties:
                          list:
                            type: array
                            items:
                              allOf:
                                - properties:
                                    id:
                                      type: integer
                                      description: 配置Id
                                      example: 5
                                - $ref: '#/components/schemas/schemaConfig'
                                - $ref: '#/components/schemas/schemaConfigOutput'
                          total:
                            type: integer
                            description: 配置总数
                            example: 2
components:
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: 默认翻页页数
    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: 默认翻页每页显示条目数
    paramSearchKeyWord:
      in: query
      name: keyword
      required: false
      schema:
        type: string
      description: 带上该参数，输出包含该关键词的结果。注意：关键词长度最小为2
    paramLikeStatusUserId:
      in: query
      name: like_status_user_id
      required: false
      schema:
        type: integer
      description: 带上该参数，输出结果中包含该用户是否赞过的状态
    paramFollowStatusUserId:
      in: query
      name: follow_status_user_id
      required: false
      schema:
        type: integer
      description: 带上该参数，输出结果中包含该该用户是否关注过的状态
  schemas:
    schemaConfigId:
      type: object
      required:
        - config_id
      properties:
        config_id:
          type: integer
          description: 配置id
          example: 2
    schemaConfig:
      type: object
      properties:
        config_group_id:
          type: string
          description: 配置所属的分组id
          example: 2
    schemaConfigInput:
      $ref: '#/components/schemas/schemaConfigValue'
    schemaConfigOutput:
      allOf:
        - $ref: '#/components/schemas/schemaConfigKey'
        - $ref: '#/components/schemas/schemaConfigValue'
    schemaConfigValue:
      type: object
      properties:
        config_value:
          type: string
          description: 配置对应的值
          example: https://www.sumeils.com
    schemaConfigKey:
      type: object
      properties:
        config_key:
          type: integer
          description: 配置名（键）
          example: prod_host_url
    schemaMedia:
      type: object
      properties:
        media_id:
          type: integer
          description: 媒体文件id
          example: 5
        file_path:
          type: string
          description: 媒体文件相对路径
          example: s3/2020/07/09/5f06fcf66871f.jpg
        file_url:
          type: string
          description: 媒体文件外链地址
          example: https://static.sumeils.com/s3/2020/07/09/5f06fcf66871f.jpg
    schemaTagId:
      type: object
      required:
        - tag_id
      properties:
        tag_id:
          type: integer
          description: 标签的id
          example: 5
    schemaTag:
      type: object
      properties:
        name:
          type: string
          description: 标签名
          example: 化妆品
        tag_group_id:
          type: integer
          description: 标签所归属的标签组id
          example: 3
    tagInfo:
      type: object
      required:
        - tag_id
        - content_id
        - user_id
      properties:
        tag_id:
          type: integer
          description: 需要打的标签id
          example: 5
        content_id:
          type: integer
          description: 打标签的文章
          example: 3
        user_id:
          type: integer
          description: 打标签的人
          example: 23
    likeInfo:
      type: object
      required:
        - content_id
        - user_id
      properties:
        content_id:
          type: integer
          description: 点赞了哪一篇文章
          example: 3
        user_id:
          type: integer
          description: 点赞人
          example: 23
    schemaCommentId:
      type: object
      required:
        - comment_id
      properties:
        comment_id:
            type: integer
            description: 评论ID
            example: 3
    schemaCommentCommon:
      type: object
      required:
        - user_id
        - content_id
      properties:
        comment:
          type: string
          description: 评论主体内容
          example: 顶楼主，我深表同感
        user_id:
          type: integer
          description: 评论人
          example: 23
        content_id:
          type: integer
          description: 评论属于那一篇内容
          example: 3
        target_comment_id:
          type: integer
          description: 评论用于回复哪一条评论
          example: 41
    schemaContent:
      type: object
      properties:
          title:
            type: string
            description: 内容标题
            example: 我的第一篇日志！
          # summary:
          #   type: string
          #   description: 内容摘要
          #   example: 这是我的第一篇日志，先写到……
          priority:
            type: integer
            description: 内容优先级，主要用于置顶
            minimum: 0
            maximum: 100
            example: 50
          content_type:
            type: integer
            description: 内容的类型，例如：1-图文,2-视频等
            example: 1
    schemaContentId:
      type: object
      required:
        - content_id
      properties:
        content_id:
            type: integer
            description: 内容ID，即文章id
            example: 3
    schemaContentInput:
      type: object
      properties:
          content:
            type: string
            description: 内容正文
            example: <p>这是我的第一篇日志</p><p>先写到这里吧，下次再见</p>
          user_id:
            type: integer
            description: 内容作者的user_id
            example: 4
          tag_id:
            type: string
            description: 内容标签id（多个用英文逗号分隔）
            example: 1,2,3,6,9
          media_id:
            type: string
            description: 内容包含的媒体附件id（多个用英文逗号分隔）
            example: 1,2,3
          cover_id:
            type: string
            description: 封面图id
            example: 1
    schemaContentOutput:
      type: object
      properties:
          user_name:
            type: string
            description: 用户名
            example: 关羽
          user_avatar:
            type: string
            description: 用户头像图片的URL地址
            example: https://dn-qiniu-avatar.qbox.me/avatar/1.png
          create_time:
            type: string
            description: 内容发布日期
            example: "2021-04-09 09:52:13"
          like_total:
            type: integer
            description: 文章获赞总数
            example: 12
          like_status:
            type: integer
            description: 该文章是否赞的状态，只有当传入`like_status_user_id`时才会返回，1表示赞过，0表示未赞
            example: 1
          cover_media_id:
            type: integer
            description: 内容封面图的媒体id
            example: 11
          cover_file_url:
            type: string
            description: 媒体附件外链
            example: https://static.sumeils.com/s3/2021/04/07/606d5767ad23c.png
    schemaContentOutputGet:
      type: object
      properties:
          content:
            type: string
            description: 内容正文
            example: <p>这是我的第一篇日志</p><p>先写到这里吧，下次再见</p>
          tag:
            type: array
            items:
              properties:
                id:
                  type: integer
                  description: 内容标签id
                  example: 11
                name:
                  type: string
                  description: 内容标签名
                  example: 减肥
                tag_group_id:
                  type: integer
                  description: 标签分组id
                  example: 2
          media:
            type: array
            items:
              properties:
                id:
                  type: integer
                  description: 媒体附件id
                  example: 342
                file_path:
                  type: string
                  description: 媒体附件外链，不含域名
                  example: s3/2021/04/07/606d5767ad23c.png
                file_url:
                  type: string
                  description: 媒体附件外链
                  example: https://static.sumeils.com/s3/2021/04/07/606d5767ad23c.png
    schemaContentOutputList:
      type: object
      properties:
          tag_ids:
            type: string
            description: 内容标签id（多个用英文逗号分隔）
            example: 1,2,3,6,9
    schemaUserFollow:
      type: object
      required:
        - user_id
        - follower_user_id
      properties:
          user_id:
            type: integer
            description: 需要被关注的用户ID，即关注对象
            example: 3
          follower_user_id:
            type: integer
            description: 需要关注的用户ID，即关注者
            example: 2
    schemaUserMobile:
      type: object
      required:
        - mobile
      properties:
          mobile:
            type: integer
            description: 用户手机号
            example: 13812345678
    schemaUserThirdId:
      type: object
      properties:
          third_app_id:
            type: integer
            description: 第三方平台标识，可以自定义
            example: wechat_mini_program_truly
          third_user_id:
            type: integer
            description: 第三方平台用户唯一id，例如微信这里是openid
            example: oMIo0v6Ehkg4ardV46YBzpvONZeQ
    schemaUserId:
      type: object
      required:
        - user_id
      properties:
          user_id:
            type: integer
            description: 用户ID
            example: 2
    schemaUser:
      type: object
      properties:
          name:
            type: string
            description: 用户名
            example: 关羽
          mobile:
            type: integer
            description: 用户手机号
            example: 13812345678
          avatar:
            type: string
            description: 用户头像图片的URL地址
            example: https://dn-qiniu-avatar.qbox.me/avatar/1.png
          description:
            type: string
            description: 用户描述
            example: 我是猛将一名
    schemaUserOutput:
      type: object
      properties:
          follow_status:
            type: integer
            description: 该用户是否关注的状态，只有当传入`follow_status_user_id`时才会返回，1表示已关注，0表示未关注
            example: 1 
    codeMsg:
      type: object
      required: 
        - code
        - msg
      properties:
        code:
          type: integer
          description: 状态码
          example: 0
        msg:
          type: string
          description: 消息提示
          example: request success
  # examples:
    # contentList: 
      # summary: This is a text example
      # externalValue: 'http://foo.bar/examples/address-example.txt'
      # - content_id: 1
      #   title: 我的第一篇日志！
      #   content: <p>这是我的第一篇日志</p><p>先写到这里吧，下次再见</p>
      #   user_id: 1
      #   priority: 1
      #   tag_id: 1,2,3
      #   media_id: 237,238,240
      # - content_id: 2
      #   title: 我的第2篇日志！
      #   content: <p>这是我的第2篇日志</p><p>先写到这里吧，下次再见</p>
      #   user_id: 1
      #   priority: 50
      #   media_id: 237,238
      # - content_id: 3
      #   title: 我的第3篇日志！
      #   content: <p>这是我的第3篇日志</p><p>先写到这里吧，下次再见</p>
      #   user_id: 1
      #   priority: 0
      #   tag_id: 1,2
  links: {}
  callbacks: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
tags:
  - name: User
    description: 用户中心
  - name: Content
    description: 内容中心
  - name: Media
    description: 媒体中心
  - name: Tag
    description: 标签中心
  - name: Config
    description: 配置中心